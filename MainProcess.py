from StudentDataHandler import add_student, modify_student, remove_student, help_student
from SubjectDataHandler import handleAddSubject, handleModifySubject, handleRemoveSubject, handleShowSubject
from ScoreDataHandler import handleAddStudentSubjectRelation, handleModifyStudentSubjectRelation, handleDeleteStudentSubjectRelation, handleShowMark, handleShowAllMarks, handleShowAllStudents 
from TeacherDataHandler import add_teacher, modify_teacher, remove_teacher, help_teacher
from ClassDataHandler import handleAddClassRoom, handleModifyClassRoom, handleRemoveClassRoom, handleHelpClassRoom
from RelationshipDataHandler import handleAddTeacherClass, handleAddStudentClass, handleShowTeacherStudents, handleShowClassStudents



#FUNCTIONS

def star_design(string):
    "the start and ending messages"
    print("*"*150+"\n"+"*"*150)
    print(string.center(150,'*'))
    print("*"*150+"\n"+"*"*150)





def commonErrors(commandList,length):
    if len(commandList)!=length:
        return "Syntax error. Type 'Help' to see the command syntax and their functions."
    elif '' in commandList:
        return "Error. There are extra white spaces." 
    else:
        return ''





def help_command():
    print("""
add_student <student_name> <DOB>                                                                 : Adds a new student to the system. Name can only contain one word,
                                                                                                   and is case sensitive. The DOB must be in the form DD/MM/YYYY.

modify_student <student_id> <new_student_name> <DOB>                                             : Modifies the name or the DOB of an already added student.

remove_student <student_id>                                                                      : Removes a student from the system if scores haven't been added.

help_student <student_id>                                                                        : Shows all the details related to the student.

add_subject <name> <stream>                                                                      : Adds subject name and stream (O/L or A/L) into the system.
                                                                                                   Subject is a single word with only letters(case sensitive).
                                                                                                   An id will be generated by the system when the subject is added.                                              
                                                                                                                                                                                                                                                    
modify_subject <subject_id> <new_ subject _name> <stream>                                        : Modifies subject name and stream.

remove_subject <subject_id>                                                                      : Removes a subject from application if it exists and if a score
                                                                                                   hasn't been added.

show_subject <subject_id>                                                                        : Shows all details of the subject in a printed table.

add_mark <student_name> <subject_name> <score>                                                   : Keeps a note about student's score until application terminates.

modify_mark <old_student_id> <old_subject_id> <new_student_id> <new_subject_id> <score>          : Updates student name, subject name and score.

remove_mark <student_id> <subject_id>                                                            : Clears student's score. After clearing, the user can add it again.

show_mark <student_id> <subject_id>                                                              : Shows all details of the score.

show_all_marks <student_id>                                                                      : Shows all marks related to the student as a table.

show_all_students <subject_id>                                                                   : Shows all students related to the subject as a table.

add_teacher <teacher_name> <Subject_ID_list_seperated_by_commas> <DOB> <Stream>                  : Adds a new teacher to the system. An ID will be shown at the end.

modify_teacher <teacher_id> <new_teacher_name> <new_subject_ID_list> <new_DOB> <new_stream>      : Modifies the data of an already added teacher.
                                                                                                   The subject ID list must be seperated by commas.
                                                                                
remove_teacher <teacher_id>                                                                      : Removes a teacher from the system and all the relationships of the
                                                                                                   teacher.

help_teacher <teacher_name>                                                                      : Shows all the details related to the teacher.

add_class_room <class_name> <capacity> <location>                                                : Adds details about the class room for the system.
                                                                                                   An ID will be generated by the system when the class is added.
                                                                                                   Class Name should be in the correct format. Example:7-B

modify_class_room <class_room_id> <new_class_name> <new_capacity> <new_location>                 : Modifies class room name,capacity and location.

remove_class_room <class_room_id>                                                                : Removes the class room from the system.

help_class_room <class_room_id>                                                                  : Show all the details of the class room.

add_class_teacher <teacher_Id> <class_room_id>                                                   : Assigns the teacher to the class room.

add_student_class <student_id> <class_room_id>                                                   : Assigns the student to the class room.

show_teachers_students <teacher id>                                                              : Shows all students in the class that the teacher is assigned.

show_class_students <class room id>                                                              : Shows all students in the class.

exit                                                                                             : Exits the application.

help                                                                                             : Shows the syntax, operation description, details of each error
                                                                                                   message of all the available commads.

""")



###INTRO GREETING

star_design("Welcome to EduManage - Smart Student Evaluation System")
help_command()



    

#PROCESS
commandList=input("Enter the command: ").strip(" ").split(" ") 
while commandList[0]!="exit":
    #student
    if commandList[0]=="add_student":
        if commonErrors(commandList,3)=='':
            add_student(commandList)
        else:
            print(commonErrors(commandList,3))
    elif commandList[0]=="modify_student":
        if commonErrors(commandList,4)=='':
            modify_student(commandList)
        else:
            print(commonErrors(commandList,4))
    elif commandList[0]=="remove_student":
        if commonErrors(commandList,2)=='':
            remove_student(commandList)
        else:
            print(commonErrors(commandList,2))
    elif commandList[0]=="help_student":
        if commonErrors(commandList,2)=='':
            help_student(commandList)
        else:
            print(commonErrors(commandList,2))
    #subject
    elif commandList[0]=="add_subject":
        if commonErrors(commandList,3)=='':
             handleAddSubject(commandList[1],commandList[2])
        else:
            print(commonErrors(commandList,3))     
    elif commandList[0]=="modify_subject":
        if commonErrors(commandList,4)=='':
            handleModifySubject(commandList[1],commandList[2],commandList[3])
        else:
            print(commonErrors(commandList,4))    
    elif commandList[0]=="remove_subject":
        if commonErrors(commandList,2)=='':
            handleRemoveSubject(commandList[1])
        else:
            print(commonErrors(commandList,2))
    elif commandList[0]=="show_subject":
        if commonErrors(commandList,2)=='':
            handleShowSubject(commandList[1])
        else:
            print(commonErrors(commandList,2))
    #mark
    elif commandList[0]=="add_mark":
        if commonErrors(commandList,4)=='':
            handleAddStudentSubjectRelation(commandList[1],commandList[2],commandList[3])
        else:
            print(commonErrors(commandList,4))
    elif commandList[0]=="modify_mark":
        if commonErrors(commandList,6)=='':
            handleModifyStudentSubjectRelation(commandList[1],commandList[2],commandList[3],commandList[4],commandList[5])
        else:
            print(commonErrors(commandList,6))
    elif commandList[0]=="remove_mark":
        if commonErrors(commandList,3)=='':
            handleDeleteStudentSubjectRelation(commandList[1],commandList[2])
        else:
            print(commonErrors(commandList,3))
    elif commandList[0]=="show_mark":
        if commonErrors(commandList,3)=='':
            handleShowMark(commandList[1],commandList[2])
        else:
            print(commonErrors(commandList,3))
    elif commandList[0]=="show_all_marks":
        if commonErrors(commandList,2)=='':
            handleShowAllMarks(commandList[1])
        else:
            print(commonErrors(commandList,2))
    elif commandList[0]=="show_all_students":
        if commonErrors(commandList,2)=='':
            handleShowAllStudents(commandList[1])
        else:
            print(commonErrors(commandList,2))
    #teacher
    elif commandList[0]=="add_teacher":
        if commonErrors(commandList,5)=='':
            add_teacher(commandList)
        else:
            print(commonErrors(commandList,5))
    elif commandList[0]=="modify_teacher":
        if commonErrors(commandList,6)=='':
            modify_teacher(commandList)
        else:
            print(commonErrors(commandList,6))
    elif commandList[0]=="remove_teacher":
        if commonErrors(commandList,2)=='':
            remove_teacher(commandList)
        else:
            print(commonErrors(commandList,2))
    elif commandList[0]=="help_teacher":
        if commonErrors(commandList,2)=='':
            help_teacher(commandList)
        else:
            print(commonErrors(commandList,2))
    #class
    elif commandList[0]=="add_class_room":
        if '' in commandList:
            print("Error. There are extra white spaces.")
        elif len(commandList)<4:
            print("Syntax error. Type 'help' to see the function list and their uses.")
        else:
            handleAddClassRoom(commandList[1],commandList[2]," ".join(commandList[3:]))
    elif commandList[0]=="modify_class_room":
        if '' in commandList:
            print("Error. There are extra white spaces.")
        elif len(commandList)<5:
            print("Syntax error. Type 'help' to see the function list and their uses.")
        else:
            handleModifyClassRoom(commandList[1],commandList[2],commandList[3]," ".join(commandList[4:]))
    elif commandList[0]=="remove_class_room":
        if commonErrors(commandList,2)=='':
            handleRemoveClassRoom(commandList[1])
        else:
            print(commonErrors(commandList,2))
    elif commandList[0]=="help_class_room":
        if commonErrors(commandList,2)=='':
            handleHelpClassRoom(commandList[1])
        else:
            print(commonErrors(commandList,2))
    #relationships
    elif commandList[0]=="add_class_teacher":
        if commonErrors(commandList,3)=='':
            handleAddTeacherClass(commandList[1],commandList[2])
        else:
            print(commonErrors(commandList,3))
    elif commandList[0]=="add_student_class":
        if commonErrors(commandList,3)=='':
            handleAddStudentClass(commandList[1],commandList[2])
        else:
            print(commonErrors(commandList,3))
    elif commandList[0]=="show_teachers_students":
        if commonErrors(commandList,2)=='':
            handleShowTeacherStudents(commandList[1])
        else:
            print(commonErrors(commandList,2))
    elif commandList[0]=="show_class_students":
        if commonErrors(commandList,2)=='':
            handleShowClassStudents(commandList[1])
        else:
            print(commonErrors(commandList,2))
    elif commandList[0]=="help":
        help_command()
    else:
        print("Invalid command. Type 'help' to see the commands and their functions.")
    commandList=input("Enter the command: ").strip(" ").split(" ") 
else:
    star_design("Goodbye!! Have a nice day")
